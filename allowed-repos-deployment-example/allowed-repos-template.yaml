apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: allowedrepos
spec:
  crd:
    spec:
      names:
        kind: AllowedRepos
        listKind: AllowedRepoList
        plural: allowedrepos
        singular: allowedrepo 
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowedreposlist:
              type: array
              items:
                type: string
            allowednamespacelist:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package allowedrepos
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.template.spec.containers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        } 
       
        violation[{"msg": msg}] {
          container := input.review.object.spec.jobTemplate.spec.template.spec.containers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        }
 
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.template.spec.initContainers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.jobTemplate.spec.template.spec.initContainers[_]
          notInRepoList(container)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.allowedreposlist])
        }

        notInRepoList(container){
          ns := input.review.object.metadata.namespace
          not allowedNameSpaces(ns)
          found := [yes | repo = input.parameters.allowedreposlist[_] ; yes = startswith(container.image, repo)]
          not any(found)
        }

        allowedNameSpaces(ns){
          allowednamespace = input.parameters.allowednamespacelist[_]
          ns == allowednamespace
        }
